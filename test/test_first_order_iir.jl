# This file is a part of RadiationDetectorDSP.jl, licensed under the MIT License (MIT).

using RadiationDetectorDSP
using Test

using Unitful
using RadiationDetectorSignals, ArraysOfArrays, FillArrays
using InverseFunctions
using Adapt

using RadiationDetectorDSP: bc_rdfilt, bc_rdfilt!


@testset "FirstOrderIIR" begin
    flt = FirstOrderIIR((0.2, 0.15), (-0.8,))
        
    @test adapt(Array, flt) isa FirstOrderIIR

    wfs_x = ArrayOfRDWaveforms((
        Fill(1.5u"ns" .* (1:47), 10),
        ArrayOfSimilarArrays([vcat(fill(0.5f0, 14 - i), zeros(Float32, 9 + i),ones(Float32, 24)) for i in 1:10])
    ))
    wf_x = wfs_x[1]
    x = wf_x.signal
    # From DSP.filt(DSP.Biquad(flt.b_01..., 0., flt.a_1..., 0.), x):
    y_ref = Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.6718384, 0.7124707, 0.7449766, 0.77098125, 0.791785, 0.808428, 0.8217424, 0.7323939, 0.58591515, 0.46873212, 0.3749857, 0.29998854, 0.23999085, 0.19199267, 0.15359414, 0.12287531, 0.09830025, 0.2786402, 0.57291216, 0.8083297, 0.9966638, 1.147331, 1.2678648, 1.3642919, 1.4414334, 1.5031468, 1.5525174, 1.592014, 1.6236112, 1.648889, 1.6691111, 1.6852889, 1.6982311, 1.7085849, 1.7168679, 1.7234943, 1.7287955, 1.7330364, 1.7364291, 1.7391433, 1.7413146]
    wf_y_ref = RDWaveform(wf_x.time, y_ref)

    X = wfs_x.signal
    Y_ref = ArrayOfSimilarArrays([
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.6718384, 0.7124707, 0.7449766, 0.77098125, 0.791785, 0.808428, 0.8217424, 0.7323939, 0.58591515, 0.46873212, 0.3749857, 0.29998854, 0.23999085, 0.19199267, 0.15359414, 0.12287531, 0.09830025, 0.2786402, 0.57291216, 0.8083297, 0.9966638, 1.147331, 1.2678648, 1.3642919, 1.4414334, 1.5031468, 1.5525174, 1.592014, 1.6236112, 1.648889, 1.6691111, 1.6852889, 1.6982311, 1.7085849, 1.7168679, 1.7234943, 1.7287955, 1.7330364, 1.7364291, 1.7391433, 1.7413146],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.6718384, 0.7124707, 0.7449766, 0.77098125, 0.791785, 0.808428, 0.7217424, 0.57739395, 0.46191514, 0.3695321, 0.2956257, 0.23650055, 0.18920045, 0.15136035, 0.12108828, 0.09687062, 0.0774965, 0.2619972, 0.5595978, 0.79767823, 0.98814255, 1.140514, 1.2624112, 1.359929, 1.4379432, 1.5003545, 1.5502837, 1.5902269, 1.6221815, 1.6477453, 1.6681962, 1.684557, 1.6976455, 1.7081164, 1.7164931, 1.7231945, 1.7285556, 1.7328445, 1.7362756, 1.7390205, 1.7412164],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.6718384, 0.7124707, 0.7449766, 0.77098125, 0.791785, 0.708428, 0.5667424, 0.45339394, 0.36271513, 0.2901721, 0.2321377, 0.18571015, 0.14856812, 0.1188545, 0.095083594, 0.07606688, 0.060853504, 0.2486828, 0.54894626, 0.789157, 0.98132557, 1.1350604, 1.2580484, 1.3564388, 1.435151, 1.4981208, 1.5484966, 1.5887973, 1.6210378, 1.6468303, 1.6674643, 1.6839714, 1.697177, 1.7077416, 1.7161933, 1.7229546, 1.7283638, 1.732691, 1.7361528, 1.7389222, 1.7411377],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.6718384, 0.7124707, 0.7449766, 0.77098125, 0.69178504, 0.553428, 0.4427424, 0.35419393, 0.28335515, 0.22668411, 0.1813473, 0.14507782, 0.11606227, 0.09284981, 0.07427985, 0.05942388, 0.047539104, 0.23803128, 0.540425, 0.78234005, 0.97587204, 1.1306976, 1.2545581, 1.3536465, 1.4329172, 1.4963337, 1.547067, 1.5876536, 1.6201229, 1.6460983, 1.6668787, 1.6835029, 1.6968024, 1.7074418, 1.7159535, 1.7227628, 1.7282102, 1.7325681, 1.7360545, 1.7388437, 1.7410749],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.6718384, 0.7124707, 0.7449766, 0.6709813, 0.536785, 0.429428, 0.3435424, 0.27483392, 0.21986714, 0.17589371, 0.14071497, 0.11257198, 0.09005758, 0.072046064, 0.05763685, 0.046109483, 0.036887586, 0.22951007, 0.5336081, 0.77688646, 0.97150916, 1.1272073, 1.2517658, 1.3514127, 1.4311302, 1.4949042, 1.5459234, 1.5867386, 1.619391, 1.6455127, 1.6664102, 1.6831281, 1.6965026, 1.707202, 1.7157617, 1.7226093, 1.7280874, 1.7324699, 1.735976, 1.7387807, 1.7410246],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.6718384, 0.7124707, 0.64497656, 0.51598126, 0.41278502, 0.330228, 0.26418242, 0.21134593, 0.16907674, 0.13526139, 0.10820911, 0.08656729, 0.06925383, 0.055403065, 0.044322453, 0.03545796, 0.02836637, 0.2226931, 0.5281545, 0.7725236, 0.9680189, 1.124415, 1.2495321, 1.3496257, 1.4297005, 1.4937605, 1.5450083, 1.5860066, 1.6188053, 1.6450443, 1.6660354, 1.6828283, 1.6962627, 1.7070101, 1.7156081, 1.7224865, 1.7279892, 1.7323914, 1.735913, 1.7387304, 1.7409843],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.6718384, 0.61247075, 0.48997658, 0.39198127, 0.313585, 0.250868, 0.20069441, 0.16055553, 0.12844442, 0.10275554, 0.08220443, 0.06576354, 0.052610833, 0.04208867, 0.033670932, 0.026936747, 0.021549398, 0.21723951, 0.5237916, 0.7690333, 0.96522665, 1.1221813, 1.247745, 1.348196, 1.4285568, 1.4928454, 1.5442764, 1.5854211, 1.6183369, 1.6446695, 1.6657356, 1.6825885, 1.6960708, 1.7068566, 1.7154853, 1.7223883, 1.7279106, 1.7323285, 1.7358627, 1.7386903, 1.7409521],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.621048, 0.5718384, 0.45747072, 0.36597657, 0.29278126, 0.234225, 0.18738, 0.14990401, 0.119923204, 0.09593856, 0.07675085, 0.06140068, 0.049120545, 0.039296437, 0.031437147, 0.025149718, 0.020119775, 0.01609582, 0.21287666, 0.52030134, 0.7662411, 0.96299285, 1.1203942, 1.2463155, 1.3470523, 1.4276419, 1.4921135, 1.5436908, 1.5849526, 1.6179621, 1.6443697, 1.6654958, 1.6823967, 1.6959172, 1.7067338, 1.7153871, 1.7223096, 1.7278477, 1.7322782, 1.7358226, 1.7386581, 1.7409264],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.55756, 0.521048, 0.4168384, 0.33347073, 0.26677656, 0.21342126, 0.17073701, 0.1365896, 0.10927168, 0.08741735, 0.06993388, 0.055947103, 0.044757683, 0.035806146, 0.028644918, 0.022915933, 0.018332746, 0.014666198, 0.011732958, 0.20938636, 0.5175091, 0.7640073, 0.96120584, 1.1189647, 1.2451717, 1.3461374, 1.4269099, 1.4915279, 1.5432223, 1.5845779, 1.6176623, 1.6441299, 1.6653038, 1.6822431, 1.6957945, 1.7066356, 1.7153084, 1.7222468, 1.7277974, 1.7322379, 1.7357904, 1.7386323, 1.7409059],
        Float32[0.1, 0.255, 0.379, 0.4782, 0.45756, 0.366048, 0.2928384, 0.23427072, 0.18741658, 0.14993326, 0.11994661, 0.09595729, 0.07676583, 0.061412662, 0.04913013, 0.039304104, 0.031443283, 0.025154628, 0.020123702, 0.016098961, 0.012879169, 0.010303335, 0.008242669, 0.20659414, 0.5152753, 0.76222026, 0.9597762, 1.117821, 1.2442567, 1.3454055, 1.4263244, 1.4910594, 1.5428475, 1.5842781, 1.6174225, 1.643938, 1.6651504, 1.6821203, 1.6956962, 1.706557, 1.7152456, 1.7221965, 1.7277572, 1.7322057, 1.7357646, 1.7386117, 1.7408893]
    ])
    wfs_y_ref = ArrayOfRDWaveforms((deepcopy(wfs_x.time), Y_ref))
 
    fi = @inferred fltinstance(flt, smplinfo(x))
    y = similar(x)
    fill!(y, NaN)

    @test @inferred(rdfilt!(y, fi, x)) === y
    @test y ≈ y_ref
    #fill!(y, NaN)
    #@test @inferred(rdfilt!(y, flt, x)) === y
    #@test y ≈ y_ref

    @test @inferred(rdfilt(fi, x)) ≈ y_ref
    #@test @inferred(rdfilt(flt, x)) ≈ y_ref

    #@test @inferred(fi(x)) ≈ y_ref
    @test @inferred(flt(x)) ≈ y_ref

    @test @inferred(rdfilt(fi, wf_x)) ≈ wf_y_ref
    #@test @inferred(rdfilt(flt, wf_x)) ≈ wf_y_ref

    #@test @inferred(fi(wf_x)) ≈ wf_y_ref
    @test @inferred(flt(wf_x)) ≈ wf_y_ref

    @test isapprox(@inferred(inverse(flt)(y)), x, rtol = 1e-3)

    flt2 = FirstOrderIIR((0.2, -0.5), (0.42,))

    @test @inferred((flt∘flt2)) isa BiquadFilter
    @test @inferred((flt∘flt2)(x)) ≈ flt(flt2(x))

    @test @inferred(BiquadFilter(flt)) isa BiquadFilter
    @test BiquadFilter(flt)(x) ≈ flt(x)

    #@test @inferred(DSP.Biquad(flt)) isa DSP.Biquad
    #@test DSP.filt(DSP.Biquad(flt), x) ≈ flt(x)

    Y = similar(X)
    fill!.(Y, NaN)

    @test @inferred(bc_rdfilt!(Y, fi, X)) === Y
    @test Y ≈ Y_ref
    #@test @inferred(bc_rdfilt!(Y, flt, X)) === Y
    #@test Y ≈ Y_ref

    @test @inferred(bc_rdfilt(fi, X)) ≈ Y_ref
    #@test @inferred(bc_rdfilt(flt, X)) ≈ Y_ref
    #@test @inferred(broadcast(fi, X)) ≈ Y_ref
    @test @inferred(broadcast(flt, X)) ≈ Y_ref
    #@test typeof(broadcast(fi, X)) == typeof(Y_ref)
    @test typeof(broadcast(flt, X)) == typeof(Y_ref)

    @test @inferred(bc_rdfilt(fi, wfs_x)) ≈ wfs_y_ref
    #@test @inferred(bc_rdfilt(flt, wfs_x)) ≈ wfs_y_ref
    #@test @inferred(broadcast(fi, wfs_x)) ≈ wfs_y_ref
    @test @inferred(broadcast(flt, wfs_x)) ≈ wfs_y_ref
    #@test typeof(broadcast(fi, wfs_x)) == typeof(wfs_y_ref)
    @test typeof(broadcast(flt, wfs_x)) == typeof(wfs_y_ref)
end
