var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [RadiationDetectorDSP]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#RadiationDetectorDSP.add_rect_pulse!","page":"API","title":"RadiationDetectorDSP.add_rect_pulse!","text":"add_rect_pulse!(samples::AbstractSamples, start::Integer, pulselen::Integer, amplitude::Real = 1.0)\n\nAdd a rectangular pulse to samples.\n\n\n\n\n\n","category":"function"},{"location":"api/#RadiationDetectorDSP.charge_trapflt!-Tuple{AbstractVector{<:Union{var\"#s16\", var\"#s1\"} where {var\"#s16\"<:AbstractFloat, var\"#s1\"<:(SIMD.Vec{N, <:var\"#s16\"} where N)}}, Integer, Integer}","page":"API","title":"RadiationDetectorDSP.charge_trapflt!","text":"charge_trapflt!(samples::AbstractVector{<:RealOrSIMD{<:AbstractFloat}}, navg::Integer, ngap::Integer)\n\nApply a trapezoidal FIR filter to a charge signal in samples.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.cr_filter-Tuple{Real}","page":"API","title":"RadiationDetectorDSP.cr_filter","text":"cr_filter(RC::Real)\n\nReturn a DSP.jl-compatible CR-filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.crmod_filter-Tuple{Real}","page":"API","title":"RadiationDetectorDSP.crmod_filter","text":"crmod_filter(RC::Real)\n\nReturn a DSP.jl-compatible modified CR-filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.differentiator_filter-Tuple{Real}","page":"API","title":"RadiationDetectorDSP.differentiator_filter","text":"differentiator_filter(gain::Real)\n\nReturn a DSP.jl-compatible differentiator filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.gen_rect_pulse","page":"API","title":"RadiationDetectorDSP.gen_rect_pulse","text":"gen_rect_pulse(tracelen::Integer, start::Integer, pulselen::Integer, amplitude::Real = 1.0)\n\nGenerate a rectangular pulse.\n\n\n\n\n\n","category":"function"},{"location":"api/#RadiationDetectorDSP.integrator_cr_filter-Tuple{Real, Real}","page":"API","title":"RadiationDetectorDSP.integrator_cr_filter","text":"integrator_cr_filter(gain::Real, RC::Real)\n\nReturn a DSP.jl-compatible integrator plus CR filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.integrator_crmod_filter-Tuple{Real, Real}","page":"API","title":"RadiationDetectorDSP.integrator_crmod_filter","text":"integrator_crmod_filter(gain::Real, RC::Real)\n\nReturn a DSP.jl-compatible integrator plus modified CR filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.integrator_filter-Tuple{Real}","page":"API","title":"RadiationDetectorDSP.integrator_filter","text":"integrator_filter(gain::Real)\n\nReturn a DSP.jl-compatible integrator filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.inv_cr_filter-Tuple{Real}","page":"API","title":"RadiationDetectorDSP.inv_cr_filter","text":"inv_cr_filter(RC::Real)\n\nReturn a DSP.jl-compatible inverse CR-filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.inv_crmod_filter-Tuple{Real}","page":"API","title":"RadiationDetectorDSP.inv_crmod_filter","text":"inv_crmod_filter(RC::Real)\n\nReturn a DSP.jl-compatible inverse modified CR-filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.rc_filter-Tuple{Real}","page":"API","title":"RadiationDetectorDSP.rc_filter","text":"rc_filter(RC::Real)\n\nReturn a DSP.jl-compatible RC-filter.\n\n\n\n\n\n","category":"method"},{"location":"api/#RadiationDetectorDSP.simple_csa_response_filter","page":"API","title":"RadiationDetectorDSP.simple_csa_response_filter","text":"simplecsaresponsefilter(τrise::Real, τdecay::Real, gain::Real = one(τrise))\n\nReturn a DSP.jl-compatible filter that models the response of a typical charge-sensitive amplifier (CSA).\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#RadiationDetectorDSP.jl","page":"Home","title":"RadiationDetectorDSP.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides DSP algorithms for the output signal waveforms of radiation detectors (e.g. semiconductor- or scintillator-based systems).","category":"page"}]
}
